FORMAT: 1A

# Oodrive Computer Club API
Welcome to the Oodrive Computer Club API, dear computer enthusiast. I hope you find this page to your liking.
It documents the differents **resources** available to build really awesome apps for the OCC.

This API has been designed to be [hypermedia and RESTful](http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm). To do that, it uses a hypermedia-enabled
media type, [hal+json](http://stateless.co/hal_specification.html).

So while you build your apps, try not to rely on URI, but on affordances instead. By doing so, I can change
the URIs without breaking your application. Decoupling FTW!

If you have any question, shout out at occ@librelist.com, or come and see me. ;-)

## Authentication
**OCC API** uses bearer JWT token authentication. All authenticated request must
provide a token in their payload.

## Media Types
Where applicable this API uses the [HAL+JSON](https://github.com/mikekelly/hal_specification/blob/master/hal_specification.md) media-type to represent resources states and affordances.

## Error States
The common [HTTP Response Status Codes](https://github.com/for-GET/know-your-http-well/blob/master/status-codes.md) are used.

In addition, an `errors` property MAY be sent back in the response.

# Group Root

## OCC API [/]
API entry point.

This resource offers and initial set of affordances.

### Affordances
+ `show` (`self`) ... API entry point
+ `users` ... Lists all users
+ `authorization` ... Get a token
+ `issues` ... List all issues

### Retrieve the Entry Point [GET]

+ Response 200 (application/hal+json)

    {
      "_links": {
        "self": { "href": "/" },
        "users": { "href": "/users" },
        "authorization": { "href": "/authorization" },
        "issues": { "href": "/issues" }
      }
    }

# Group User and Authentication

## Authorization [/authorization]
The Authorization resource represents an authorization granted to the user.
In order to get an authorization, you need to use **basic authentication**.

### Attributes
+ `token` ... JWT bearer token

+ Model (application/hal+json)

    {
      "token": "abc"
    }

### Create a token [GET]
Returns a bearer token for the requesting user. The token's lifespan is
30 minutes.

+ Request
    + Headers

        Authorization: Basic dXNlcmZvbzpiYWFhYXI=

+ Response 200
    [Authorization][]

## User [/users/{id}]
The User resource.

### Attributes
+ `username` ... The name of the user
+ `email` ... The user's email

+ Parameters
    + id (required, string, `5395c5e6a8cac63681117607`) ... ID of the User in the form of a hash

+ Model (application/hal+json)

    {
      "username": "foobar",
      "email": "some@email.com"
    }

### Retrieve a single User [GET]

+ Response 200

    [User][]

## Users [/users]
A Collection of users.

The Users resource has a `count` attribute that shows the number of users. In
addition, it **embeds** user resources. The embedded User resources are partial
representations. In order to get the full representation of an embedded resource,
follow the `self` link of the User you want.

### Attributes
+ `count` ... Total count of all users

+ Model (application/hal+json)

    + Body

        {
          "count": 1,
          "_embedded": {
            "users": [
              {
                "username": "foo",
                "_links": {
                  "self": {
                    "href": "/users/5395c5e6a8cac63681117607"
                  }
                }
              },
              {
                "username": "bar",
                "_links": {
                  "self": {
                    "href": "/users/5395c5e6a8cac63681117607"
                  }
                }
              }
            ]
          }
        }

### List all users [GET]

+ Response 200

    [Users][]

### Create a User [POST]
To create a new User, provide a JSON hash with a *username*, *email* and *password*.

+ Request (application/json)

    {
        "username": "theusername",
        "email": "some@email.com",
        "password": "somepwd"
    }

+ Response 201

    [User][]

# Group Issues and Talks

## Issue [/issues/{id}]
The Issue resource. It represent an **Oodrive Computer Club** session. In this model, an issue
is made of embedded **talks**.

### Attributes
+ `title` ... The issue's title

+ Parameters
    + id (required, string, `5396fe86c362ffb556d23c3b`) ... ID of the Issue in the form of a hash

+ Model (application/hal+json)

    {
      "title": "OCC #4",
      "_embedded": {
        "talks": []
      },
      "_links": {
        "talks": {
          "href": "/issues/5396fe86c362ffb556d23c3b/talks"
        }
      }
    }

### Retrieve a sigle Issue [GET]

+ Response 200

    [Issue][]

## Issues Collection [/issues]
The Issues Collection Resource. It has a `count` attribute and embeds **issue** resources.

### Attributes
+ `count` ... Total count of all issues

+ Model (application/hal+json)

    + Body

        {
          "count": 1,
          "_embedded": {
            "issues": [
              {
                "title": "OCC #4",
                "_links": {
                  "self": {
                    "href": "/issue/5396fe86c362ffb556d23c3b"
                  }
                }
              }
            ]
          }
        }

### List all issues [GET]

+ Response 200

    [Issues Collection][]


### Create an Issue [POST]
To create a new issue, provide a JSON hash with a `title`. Once the `issue` is created, you can
_PUT_ new talks in it.

+ Request (application/json)

    {
      "title": "OCC #5"
    }

+ Response 201

    [Issue][]

## Talk [/issues/{issueId}/talks/{talkId}]
A Talk resource.

### Attributes
+ `speaker` ... The name of the speaker
+ `summary` ... A description of what they talked about

+ Parameters
    + issueId (required, string, `5396fe86c362ffb556d23c3b`) ... ID of the Issue in the form of a hash
    + talkId (required, string, `5396fab1aefa6e35542cc68e`) ... ID of the talk in the form of a hash

+ Model (application/hal+json)

    {
      "speaker": "mika",
      "summary": "FP programming made simple",
      "_links": {
        "self": {
          "href": "/issues/536b85de9c0096f904853ace/536647f4ef1413d40c5acc73"
        }
      }
    }

### View a single talk [GET]

+ Response 200

    [Talk][]

## Talks Collection [/issues/{issueId}/talks]
Collection of talks in the given issue.

+ Parameters
    + issueId (required, string, `5396fe86c362ffb556d23c3b`) ... ID of the Issue in the form of a hash

### Create a new talk [POST]
Creates a new talk in the `issueId`'s issue.

+ Request (application/json)

    {
      "speaker": "Alfred",
      "summary": "A very interesting talk about coffee making."
    }

+ Response 201

    [Talk][]
